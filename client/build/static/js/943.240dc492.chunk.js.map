{"version":3,"file":"static/js/943.240dc492.chunk.js","mappings":"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","sources":["api/orders.api.ts","components/blood-types-table/BloodTypesTable.styles.tsx","components/blood-types-table/BloodTypesTable.component.tsx","components/manage-orders-table/ManageOrdersTable.component.tsx","routes/manage-orders/ManageOrders.route.tsx","../node_modules/@mui/icons-material/CancelOutlined.js","../node_modules/@mui/icons-material/CheckCircleOutline.js"],"sourcesContent":["import axios from 'axios'\nimport { BloodType, ResponseMessage } from '../utils/common.types'\n\nconst url = 'http://localhost:8000/orders'\n\nexport type OrderBloodRequest = {\n  blood_type: BloodType\n  amount: number\n  hospital_id: string\n  man_id: string\n}\n\nexport type OrderState = 'approved' | 'rejected' | 'waiting'\n\nexport type UpdateOrderRequest = {\n  order_id: string\n  state: OrderState\n}\n\nexport type OrderForManagerResponse = {\n  order_id: string\n  order_date: string\n  blood_type: BloodType\n  amount: number\n  full_name: string\n}\n\nexport interface OrderForHospitalResponse extends UpdateOrderRequest {\n  order_date: string\n  amount: number\n  hospital_id: string\n  man_id: string\n}\n\nexport const orderBlood = (data: OrderBloodRequest) =>\n  axios.post<ResponseMessage>(url + '/order-blood', data)\n\nexport const deleteOrder = (id: string) =>\n  axios.delete<ResponseMessage>(url + `?order_id=${id}`)\n\nexport const updateOrderState = (data: UpdateOrderRequest) =>\n  axios.put<ResponseMessage>(url, data)\n\nexport const getOrdersByHospitalId = (id: string) =>\n  axios.get<OrderForHospitalResponse[]>(url + `?hospital_id=${id}`)\n\nexport const getOrdersForAManager = (id: string) =>\n  axios.get<OrderForManagerResponse[]>(url + `?man_id=${id}`)\n","import { styled, TableContainer } from '@mui/material'\n\nexport const BloodTypeTableContainer = styled(TableContainer)(({ theme }) => ({\n  width: '100%',\n  maxWidth: '240px',\n  position: 'fixed',\n  top: 88,\n  right: 25,\n\n  [theme.breakpoints.down('lg')]: {\n    position: 'static',\n  },\n\n  th: {\n    borderBottom: `1px solid ${theme.palette.info.light}`,\n  },\n\n  td: {\n    padding: '15px',\n    border: `1px solid ${theme.palette.info.light}`,\n  },\n}))\n","import {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography,\n} from '@mui/material'\nimport { AmountOfBloodTypeResponse } from '../../api/banks.api'\nimport { BloodTypeTableContainer } from './BloodTypesTable.styles'\n\nfunction BloodTypesTable({ types }: { types: AmountOfBloodTypeResponse[] }) {\n  return (\n    <Box>\n      <BloodTypeTableContainer>\n        <Typography\n          variant=\"subtitle1\"\n          component=\"h6\"\n          align=\"center\"\n          gutterBottom\n        >\n          Blood Types\n        </Typography>\n        <Table aria-label=\"remaining blood types table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Type</TableCell>\n              <TableCell align=\"center\">Units (0.5L)</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {types.map((t) => (\n              <TableRow key={t.blood_type}>\n                <TableCell align=\"center\">{t.blood_type}</TableCell>\n                <TableCell align=\"center\">{t.num_of_blood}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </BloodTypeTableContainer>\n    </Box>\n  )\n}\n\nexport default BloodTypesTable\n","import {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from '@mui/material'\nimport CheckCircleIcon from '@mui/icons-material/CheckCircleOutline'\nimport CancelOutlinedIcon from '@mui/icons-material/CancelOutlined'\nimport { AmountOfBloodTypeResponse } from '../../api/banks.api'\nimport { OrderForManagerResponse, updateOrderState } from '../../api/orders.api'\nimport { BloodType } from '../../utils/common.types'\n\ntype ManageOrdersTableProps = {\n  orders: OrderForManagerResponse[]\n  updateTables: () => void\n  types: AmountOfBloodTypeResponse[]\n}\n\ntype ChangeOrderStateParams = {\n  order_id: string\n  amount: number\n  blood_type: BloodType\n}\n\nfunction ManageOrdersTable(props: ManageOrdersTableProps) {\n  const { updateTables, orders, types } = props\n\n  const approveOrder = ({\n    order_id,\n    amount,\n    blood_type,\n  }: ChangeOrderStateParams) => {\n    const stock = types.filter((t) => t.blood_type === blood_type)[0]\n    if (stock.num_of_blood < amount)\n      alert('There is not enough blood available!')\n    else {\n      updateOrderState({ order_id, state: 'approved' })\n        .then(() => updateTables())\n        .catch((err) => console.error(err))\n    }\n  }\n\n  const rejectOrder = ({ order_id }: ChangeOrderStateParams) => {\n    updateOrderState({ order_id, state: 'rejected' })\n      .then(() => updateTables())\n      .catch((err) => console.error(err))\n  }\n\n  return (\n    <TableContainer>\n      <Typography\n        variant=\"subtitle1\"\n        component=\"h6\"\n        align=\"center\"\n        gutterBottom\n      >\n        Manage Orders\n      </Typography>\n      <Table aria-label=\"manage orders table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Hospital</TableCell>\n            <TableCell>Type</TableCell>\n            <TableCell>Units</TableCell>\n            <TableCell>Order Date</TableCell>\n            <TableCell align=\"center\">Approve</TableCell>\n            <TableCell align=\"center\">Reject</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {orders.length !== 0 ? (\n            orders.map(\n              ({ blood_type, amount, order_date, order_id, full_name }) => (\n                <TableRow key={order_id}>\n                  <TableCell>{full_name}</TableCell>\n                  <TableCell>{blood_type}</TableCell>\n                  <TableCell>{amount}</TableCell>\n                  <TableCell>\n                    {new Date(order_date).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <CheckCircleIcon\n                      cursor=\"pointer\"\n                      color=\"success\"\n                      onClick={() =>\n                        approveOrder({ order_id, amount, blood_type })\n                      }\n                    />\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <CancelOutlinedIcon\n                      cursor=\"pointer\"\n                      color=\"error\"\n                      onClick={() =>\n                        rejectOrder({ order_id, amount, blood_type })\n                      }\n                    />\n                  </TableCell>\n                </TableRow>\n              )\n            )\n          ) : (\n            <TableRow>\n              <TableCell align=\"center\" colSpan={6}>\n                No orders to manage\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default ManageOrdersTable\n","import { Grid } from '@mui/material'\nimport { useContext, useEffect, useState } from 'react'\nimport {\n  AmountOfBloodTypeResponse,\n  getAllBloodTypes,\n} from '../../api/banks.api'\nimport {\n  getOrdersForAManager,\n  OrderForManagerResponse,\n} from '../../api/orders.api'\nimport BloodTypesTable from '../../components/blood-types-table/BloodTypesTable.component'\nimport ManageOrdersTable from '../../components/manage-orders-table/ManageOrdersTable.component'\nimport { UserContext } from '../../contexts/user.context'\n\nfunction ManageOrders() {\n  const { user } = useContext(UserContext)\n\n  const [orders, setOrders] = useState<OrderForManagerResponse[]>([])\n  const [types, setTypes] = useState<AmountOfBloodTypeResponse[]>([])\n  const [updateNum, setUpdateNum] = useState(0)\n\n  useEffect(() => {\n    getOrdersForAManager(user.user_id)\n      .then((r) => {\n        setOrders(r.data)\n      })\n      .catch((err) => console.error(err))\n\n    getAllBloodTypes()\n      .then((r) => setTypes(r.data))\n      .catch((err) => console.error(err))\n  }, [user.user_id, updateNum])\n\n  const updateTables = () => {\n    setUpdateNum((prev) => prev + 1)\n  }\n\n  return (\n    <Grid container spacing={4}>\n      <Grid item xs={12} lg={9}>\n        <ManageOrdersTable\n          orders={orders}\n          updateTables={updateTables}\n          types={types}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        lg={3}\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent={'center'}\n      >\n        <BloodTypesTable types={types} />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default ManageOrders\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm3.59-13L12 10.59 8.41 7 7 8.41 10.59 12 7 15.59 8.41 17 12 13.41 15.59 17 17 15.59 13.41 12 17 8.41z\"\n}), 'CancelOutlined');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M16.59 7.58 10 14.17l-3.59-3.58L5 12l5 5 8-8zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'CheckCircleOutline');\n\nexports.default = _default;"],"names":["url","orderBlood","data","axios","deleteOrder","id","updateOrderState","getOrdersByHospitalId","getOrdersForAManager","BloodTypeTableContainer","styled","TableContainer","theme","width","maxWidth","position","top","right","breakpoints","down","borderBottom","palette","info","light","padding","border","types","Box","Typography","variant","component","align","gutterBottom","Table","TableHead","TableRow","TableCell","TableBody","map","t","blood_type","num_of_blood","props","updateTables","orders","length","amount","order_date","order_id","full_name","Date","toLocaleDateString","cursor","color","onClick","filter","alert","state","then","catch","err","console","error","approveOrder","CancelOutlined","rejectOrder","colSpan","user","useContext","UserContext","useState","setOrders","setTypes","updateNum","setUpdateNum","useEffect","user_id","r","getAllBloodTypes","Grid","container","spacing","item","xs","lg","prev","display","alignItems","justifyContent","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}