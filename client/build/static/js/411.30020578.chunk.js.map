{"version":3,"file":"static/js/411.30020578.chunk.js","mappings":"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","sources":["api/orders.api.ts","data/bloodTypes.ts","components/order-blood-form/OrderBloodForm.styles.tsx","components/order-blood-form/OrderBloodForm.component.tsx","components/table-pagination-actions/TablePaginationActions.component.tsx","components/order-history/OrderHistory.component.tsx","routes/order-blood/OrderBlood.route.tsx"],"sourcesContent":["import axios from 'axios'\nimport { BloodType, ResponseMessage } from '../utils/common.types'\n\nconst url = 'http://localhost:8000/orders'\n\nexport type OrderBloodRequest = {\n  blood_type: BloodType\n  amount: number\n  hospital_id: string\n  man_id: string\n}\n\nexport type OrderState = 'approved' | 'rejected' | 'waiting'\n\nexport type UpdateOrderRequest = {\n  order_id: string\n  state: OrderState\n}\n\nexport type OrderForManagerResponse = {\n  order_id: string\n  order_date: string\n  blood_type: BloodType\n  amount: number\n  full_name: string\n}\n\nexport interface OrderForHospitalResponse extends UpdateOrderRequest {\n  order_date: string\n  amount: number\n  hospital_id: string\n  man_id: string\n}\n\nexport const orderBlood = (data: OrderBloodRequest) =>\n  axios.post<ResponseMessage>(url + '/order-blood', data)\n\nexport const deleteOrder = (id: string) =>\n  axios.delete<ResponseMessage>(url + `?order_id=${id}`)\n\nexport const updateOrderState = (data: UpdateOrderRequest) =>\n  axios.put<ResponseMessage>(url, data)\n\nexport const getOrdersByHospitalId = (id: string) =>\n  axios.get<OrderForHospitalResponse[]>(url + `?hospital_id=${id}`)\n\nexport const getOrdersForAManager = (id: string) =>\n  axios.get<OrderForManagerResponse[]>(url + `?man_id=${id}`)\n","import { BloodType } from '../utils/common.types'\n\nconst bloodTypes: BloodType[] = [\n  'A+',\n  'A-',\n  'B+',\n  'B-',\n  'AB+',\n  'AB-',\n  '0+',\n  '0-',\n]\n\nexport default bloodTypes\n","import { styled } from '@mui/material'\nimport { Box } from '@mui/system'\n\nexport const StyledOrderForm = styled(Box)(({ theme }) => ({\n  margin: 'auto',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  padding: '0',\n  width: \"100%\",\n  maxWidth: '400px',\n}))\n","import {\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport bloodTypes from '../../data/bloodTypes'\nimport { ChangeEvent, FormEvent, useContext, useState } from 'react'\nimport { orderBlood, OrderBloodRequest } from '../../api/orders.api'\nimport { getRandomManager } from '../../api/users.api'\nimport { UserContext } from '../../contexts/user.context'\nimport { BloodType } from '../../utils/common.types'\nimport { StyledOrderForm } from './OrderBloodForm.styles'\n\nfunction OrderBloodForm({ updateOrders }: { updateOrders: () => void }) {\n  const { user } = useContext(UserContext)\n\n  const [orderForm, setOrderForm] = useState<OrderBloodRequest>({\n    blood_type: '0-' as BloodType,\n    amount: 1,\n    hospital_id: '',\n    man_id: '',\n  })\n\n  const handleChange = (event: ChangeEvent | SelectChangeEvent<BloodType>) => {\n    const element = event.target as HTMLInputElement\n    let name = element.name\n    let value = element.value\n\n    setOrderForm({ ...orderForm, [name]: value })\n  }\n\n  const handleSubmit = async (event: FormEvent) => {\n    event.preventDefault()\n\n    try {\n      const res = await getRandomManager()\n      const man_id = res.data.user_id\n\n      await orderBlood({ ...orderForm, hospital_id: user.user_id, man_id })\n      updateOrders()\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  return (\n    <StyledOrderForm component=\"form\">\n      <Typography variant=\"h5\" gutterBottom component={'h2'}>\n        Order Blood\n      </Typography>\n      <FormControl fullWidth margin=\"normal\">\n        <InputLabel id=\"select_blood_type\">Blood Type</InputLabel>\n        <Select\n          labelId=\"select_blood_type\"\n          id=\"blood_type\"\n          name=\"blood_type\"\n          onChange={(e) => handleChange(e)}\n          required\n          label=\"Blood Type\"\n          variant=\"standard\"\n          value={orderForm.blood_type}\n        >\n          {bloodTypes.map((bloodType) => (\n            <MenuItem key={bloodType} value={bloodType}>\n              {bloodType}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <TextField\n        variant=\"standard\"\n        fullWidth\n        margin=\"normal\"\n        label=\"Amount (Unit: 0.5L)\"\n        name=\"amount\"\n        onChange={handleChange}\n        type=\"number\"\n        value={orderForm.amount}\n        required\n      />\n      <Button\n        fullWidth\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleSubmit}\n      >\n        Submit\n      </Button>\n    </StyledOrderForm>\n  )\n}\n\nexport default OrderBloodForm\n","import * as React from 'react'\nimport { useTheme } from '@mui/material/styles'\nimport Box from '@mui/material/Box'\nimport IconButton from '@mui/material/IconButton'\nimport FirstPageIcon from '@mui/icons-material/FirstPage'\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft'\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight'\nimport LastPageIcon from '@mui/icons-material/LastPage'\n\ninterface TablePaginationActionsProps {\n  count: number\n  page: number\n  rowsPerPage: number\n  onPageChange: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    newPage: number\n  ) => void\n}\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n  const theme = useTheme()\n  const { count, page, rowsPerPage, onPageChange } = props\n\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, 0)\n  }\n\n  const handleBackButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, page - 1)\n  }\n\n  const handleNextButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, page + 1)\n  }\n\n  const handleLastPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\n  }\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === 'rtl' ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </Box>\n  )\n}\n\nexport default TablePaginationActions\n","import {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableFooter,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography,\n} from '@mui/material'\nimport { Box } from '@mui/system'\nimport CancelIcon from '@mui/icons-material/Cancel'\nimport { useContext, useState } from 'react'\nimport { deleteOrder } from '../../api/orders.api'\nimport { ThemeModeContext } from '../../contexts/themeMode.context'\nimport TablePaginationActions from '../table-pagination-actions/TablePaginationActions.component'\n\ntype OrderHistoryProps = {\n  myOrders: any[]\n  updateOrders: () => void\n}\n\nfunction OrderHistory({ myOrders, updateOrders }: OrderHistoryProps) {\n  const mode = useContext(ThemeModeContext).theme.mode\n  const [page, setPage] = useState(0)\n  const [rowsPerPage, setRowsPerPage] = useState(5)\n\n  const cancelOrder = (order_id: string) => {\n    deleteOrder(order_id)\n      .then(() => updateOrders())\n      .catch((err) => console.error(err))\n  }\n\n  const setBGColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return mode === 'light' ? '#6f8' : '#052'\n      case 'rejected':\n        return mode === 'light' ? '#f91' : '#600'\n      default:\n        return mode === 'light' ? '#fdf' : '#223'\n    }\n  }\n\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number\n  ) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  return (\n    <Box width={'100%'}>\n      <TableContainer sx={{ margin: 'auto' }}>\n        <Typography variant=\"h5\" component={'h2'} gutterBottom align=\"center\">\n          Order History\n        </Typography>\n        <Table aria-label=\"order history table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Type</TableCell>\n              <TableCell>Units (0.5L)</TableCell>\n              <TableCell>Date</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Cancel</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {(rowsPerPage > 0\n              ? myOrders.slice(\n                  page * rowsPerPage,\n                  page * rowsPerPage + rowsPerPage\n                )\n              : myOrders\n            ).map((order) => (\n              <TableRow\n                key={order.order_id}\n                style={{ backgroundColor: setBGColor(order.state) }}\n              >\n                <TableCell>{order.blood_type}</TableCell>\n                <TableCell>{order.amount}</TableCell>\n                <TableCell>\n                  {new Date(order.order_date).toDateString()}\n                </TableCell>\n                <TableCell>{order.state}</TableCell>\n                <TableCell>\n                  {order.state === 'waiting' ? (\n                    <CancelIcon\n                      onClick={() => cancelOrder(order.order_id)}\n                      color={'error'}\n                      sx={{ cursor: 'pointer' }}\n                    />\n                  ) : null}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n          <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                colSpan={5}\n                count={myOrders.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: {\n                    'aria-label': 'rows per page',\n                  },\n                  native: true,\n                }}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </TableContainer>\n    </Box>\n  )\n}\n\nexport default OrderHistory\n","import { Grid } from '@mui/material'\nimport { useContext, useEffect, useState } from 'react'\nimport {\n  getOrdersByHospitalId,\n  OrderForHospitalResponse,\n} from '../../api/orders.api'\nimport OrderBloodForm from '../../components/order-blood-form/OrderBloodForm.component'\nimport OrderHistory from '../../components/order-history/OrderHistory.component'\nimport { UserContext } from '../../contexts/user.context'\n\nfunction OrderBlood() {\n  const { user } = useContext(UserContext)\n  const [myOrders, setMyOrders] = useState<OrderForHospitalResponse[]>([])\n\n  useEffect(() => {\n    updateOrderHistory()\n  }, [user])\n\n  const updateOrderHistory = () => {\n    getOrdersByHospitalId(user.user_id)\n      .then((r) => setMyOrders(r.data))\n      .catch((err) => console.error(err.message))\n  }\n  return (\n    <Grid container spacing={4}>\n      <Grid item xs={12} lg={4}>\n        <OrderBloodForm updateOrders={updateOrderHistory} />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        lg={8}\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent={'center'}\n      >\n        <OrderHistory myOrders={myOrders} updateOrders={updateOrderHistory} />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default OrderBlood\n"],"names":["url","orderBlood","data","axios","deleteOrder","id","updateOrderState","getOrdersByHospitalId","getOrdersForAManager","StyledOrderForm","styled","Box","theme","margin","display","flexDirection","alignItems","justifyContent","padding","width","maxWidth","updateOrders","user","useContext","UserContext","useState","blood_type","amount","hospital_id","man_id","orderForm","setOrderForm","handleChange","event","element","target","name","value","handleSubmit","preventDefault","getRandomManager","res","user_id","console","error","component","Typography","variant","gutterBottom","FormControl","fullWidth","InputLabel","Select","labelId","onChange","e","required","label","bloodTypes","bloodType","MenuItem","TextField","type","Button","color","onClick","props","useTheme","count","page","rowsPerPage","onPageChange","sx","flexShrink","ml","IconButton","disabled","direction","LastPage","FirstPage","KeyboardArrowRight","KeyboardArrowLeft","Math","ceil","max","myOrders","mode","ThemeModeContext","setPage","setRowsPerPage","setBGColor","status","TableContainer","align","Table","TableHead","TableRow","TableCell","TableBody","slice","map","order","style","backgroundColor","state","Date","order_date","toDateString","Cancel","order_id","then","catch","err","cursor","TableFooter","TablePagination","rowsPerPageOptions","colSpan","length","SelectProps","inputProps","native","newPage","onRowsPerPageChange","parseInt","ActionsComponent","TablePaginationActions","setMyOrders","useEffect","updateOrderHistory","r","message","Grid","container","spacing","item","xs","lg"],"sourceRoot":""}